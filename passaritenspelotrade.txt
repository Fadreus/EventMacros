#só pra manter aí:  &eval( ( $.weight < $.maxweight / 100 * 85) ? 1 : 0 )

automacro AbrirStorage {
	InMap aldebaran
	exclusive 1
	run-once 1
	CharCurrentWeight < 89%
	call {
		do move 142 118
		do talknpc 143 119 r1
	}
}

automacro ArmazemAberto {
	StorageOpened 1
    exclusive 1
    call {
    	getItemsFromStorage()
        do storage close
	}
}

automacro MandarItensPorTradeMercLonge {
	CurrentWeight > 89%
    exclusive 1
    PlayerNotNear /MerchantWins/
    run-once 1
    call TradeUm
}


macro TradeUm {
	do bus MerchantWins ai manual
	do bus MerchantWins move &rand(132,134) &rand(87,89)
	do move &rand(132,134) &rand(87,89)
}

automacro MandarItensPorTradeMercPerto {
	CurrentWeight > 89%
    PlayerNear /MerchantWins/
    exclusive 1
    run-once 1
    call TradeDois
}

macro TradeDois {
	pause 1
	do deal MerchantWins
	pause 1
	do bus MerchantWins deal
	pause 1
	giveItems()
	pause 3
	call TradeTres
}

macro TradeTres {
	do deal
	do bus MerchantWins deal
	do deal
	do bus MerchantWins deal
	do relog 1
}

sub giveItems {
    my $dealed = 1;        
    my $maxdeal = 12;
	
	
    foreach my $item (@{$char->inventory->getItems}) {
        if ($item->{equipped} == 0 && $dealed < $maxdeal) {
            my $control = Misc::items_control($item->{name});
            if ($control->{storage} == 1 || $control->{sell} == 1) {
                my $qtde = $item->{amount} - $control->{keep};
                if ($qtde > 0) {
                    $dealed++;
                    giveItem($item->{invIndex},$qtde);
				}
			}
		}
	}
}

sub giveItem {
	my ($index,$qtde) = @_;
	my $cmd = sprintf("deal add %d %d",$index,$qtde);
	Commands::run($cmd);
}

sub getItemsFromStorage {
	
	for(my $index = 0; $i <=  $char->storage->size(); $index++)  {
		return if(($char->{'weight'}/$char->{'weight_max'} * 100) >= 90);
		my $item = $char->storage->get($index);
		$messageSender->sendStorageGet($index, $item->{amount});
		sleep 0.5;
	}
}

automacro Pronto? {
	PlayerNear /MerchantWins/
	IsInCoordinate 154 90
	exclusive 1
	run-once 1
	call {
		if (&storamount(Rough Oridecon) > 0) call Reset
		if (&storamount(Scell) > 0) call Reset
		if (&storamount(Rough Wind) > 0) call Reset
		if (&storamount(Iron) > 0) call Reset
		if (&storamount(Manacles) > 0) call Reset
		if (&storamount(Monk Hat) > 0) call Reset
		if (&storamount(Cruiser Card) > 0) call Reset
		if (&storamount(Branch [3]) > 0) call Reset
		if (&storamount(Candy) > 0) call Reset
		if (&storamount(Candy Cane) > 0) call Reset
		if (&storamount(Piece of Cake) > 0) call Reset
		if (&storamount(Old Blue Box) > 0) call Reset
		if (&storamount(Pearl) > 0) call Reset
		if (&storamount(2carat Diamond) > 0) call Reset
		if (&storamount(Zargon) > 0) call Reset
		if (&storamount(Myst Case Card) > 0) call Reset
		if (&storamount(Well-baked Cookie) > 0) call Reset
		if (&storamount(Level 3 Cold Bolt) > 0) call Reset
		if (&storamount(Zargon) > 0) call Reset
		if (&storamount(Hood [1]) > 0) call Reset
		if (&storamount(Christmas Cookie Card) > 0) call Reset
		if (&storamount(Darkgreen Dyestuffs) > 0) call Reset
		if (&storamount(Cookie Card) > 0) call Reset
		if (&storamount(Chef King Orleans Vol.1) > 0) call Reset
		if (&storamount(Level 3 Heal) > 0) call Reset
		if (&storamount(Sandals [1]) > 0) call Reset
		do bus MerchantWins ai auto
		do bus MerchantWins autosell
		pause 1
		switch (&config(username)) {
			case (= bot1) {
				do conf username bot2
				do conf password senha
				do relog
				do reload all
			}
			case (= bot2) {
				do conf username bot3
				do conf password senha
				do relog
				do reload all
			}
			case (= bot3) {
				do conf username bot4
				do conf password senha
				do relog
				do reload all
			}
			case (= bot4) {
				do conf username bot5
				do conf password senha
				do relog
				do reload all
			}
			case (= bot5) {
				do conf username bot6
				do conf password senha
				do relog
				do reload all
			}
			case (= bot6) {
				do conf username bot7
				do conf password senha
				do relog
				do reload all
			}
			case (= bot7) {
				do conf username bot8
				do conf password senha
				do relog
				do reload all
			}
			case (= bot8) {
				do conf username bot9
				do conf password senha
				do relog
				do reload all
			}
			case (= bot9) {
				do conf username bot10
				do conf password senha
				do relog
				do reload all
			}
			case (= bot10) {
				do conf username bot1
				pause 1
				do quit
			}
		}
	}
}

macro storage1 {
	while (&storamount(Rough Oridecon) > 0) as loop
	do storage get Rough Oridecon
	end loop
}

macro storage2 {
	while (&storamount(Scell) > 0) as loop
	do storage get Scell
	end loop
}

macro storage3 {
	while (&storamount(Rough Wind) > 0) as loop
	do storage get Rough Wind
	end loop
}

macro storage4 {
	while (&storamount(Iron) > 0) as loop
	do storage get Iron
	end loop
}

macro storage5 {
	while (&storamount(Manacles) > 0) as loop
	do storage get Manacles
	end loop
}

macro storage6 {
	while (&storamount(Monk Hat) > 0) as loop
	do storage get Monk Hat
	end loop
}

macro storage7 {
	while (&storamount(Cruiser Card) > 0) as loop
	do storage get Cruiser Card
	end loop
}

macro storage8 {
	while (&storamount(Branch [3]) > 0) as loop
	do storage get Branch [3]
	end loop
}

macro storage9 {
	while (&storamount(Candy) > 0) as loop
	do storage get Candy
	end loop
}

macro storage10 {
	while (&storamount(Candy Cane) > 0) as loop
	do storage get Candy Cane
	end loop
}

macro storage11 {
	while (&storamount(Piece of Cake) > 0) as loop
	do storage get Piece of Cake
	end loop
}

macro storage12 {
	while (&storamount(Old Blue Box) > 0) as loop
	do storage get Old Blue Box
	end loop
}

macro storage13 {
	while (&storamount(Pearl) > 0) as loop
	do storage get Pearl
	end loop
}

macro storage14 {
	while (&storamount(2carat Diamond) > 0) as loop
	do storage get 2carat Diamond
	end loop
}

macro storage15 {
	while (&storamount(Zargon) > 0) as loop
	do storage get Zargon
	end loop
}

macro storage16 {
	while (&storamount(Myst Case Card) > 0) as loop
	do storage get Myst Case Card
	end loop
}

macro storage17 {
	while (&storamount(Well-baked Cookie) > 0) as loop
	do storage get Well-baked Cookie
	end loop
}

macro storage18 {
	while (&storamount(Level 3 Cold Bolt) > 0) as loop
	do storage get Level 3 Cold Bolt
	end loop
}

macro storage19 {
	while (&storamount(Zargon) > 0) as loop
	do storage get Zargon
	end loop
}

macro storage20 {
	while (&storamount(Hood [1]) > 0) as loop
	do storage get Hood [1]
	end loop
}

macro storage21 {
	while (&storamount(Christmas Cookie Card) > 0) as loop
	do storage get Christmas Cookie Card
	end loop
}

macro storage22 {
	while (&storamount(Darkgreen Dyestuffs) > 0) as loop
	do storage get Darkgreen Dyestuffs
	end loop
}

macro storage23 {
	while (&storamount(Cookie Card) > 0) as loop
	do storage get Cookie Card
	end loop
}

macro storage24 {
	while (&storamount(Chef King Orleans Vol.1) > 0) as loop
	do storage get Chef King Orleans Vol.1
	end loop
}

macro storage25 {
	while (&storamount(Level 3 Heal) > 0) as loop
	do storage get Level 3 Heal
	end loop
}

macro storage26 {
	while (&storamount(Sandals [1]) > 0) as loop
	do storage get Sandals [1]
	end loop
}

macro additem1 {
	while (&invamount(Cookie Card) > 0) as loop
	do storage add Cookie Card
	end loop
}

macro additem2 {
	while (&invamount(Fly Wing) > 0) as loop
	do storage add Fly Wing
	end loop
}

macro additem3 {
	while (&invamount(Red Herb) > 0) as loop
	do storage add Red Herb
	end loop
}

macro Reset {
	do bus MerchantWins ai auto
	do reload eventMacros.txt
}				